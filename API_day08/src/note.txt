回顾:
  线程
    1.自定义线程类, 继承 Thread 类, 重写run方法
    2.自定义任务类, 实现Runnable接口, 重写run方法
    3.匿名内部类的方式

  线程状态:
    1.new - 对象
    2.start() -> 就绪状态/可执行状态 Runnable
    3.cpu分配时间片 -> 运行状态 running
    4.run方法结束 -> 死亡状态/被终止
    5.run->就绪状态: 时间片到期/yield()
    6.run->阻塞状态
            1.锁阻塞: 同步锁
            2.计时等待: sleep(long) wait(long)
            3.无限等待: wait()
               唤醒: notify() notifyAll()
            4.a.join(): 调用这个方法的线程进入阻塞
  线程优先级: 决定了cpu执行概率 1~10
  守护线程: 当所有前台线程结束, 守护线程也会结束

  线程同步的安全问题: 多线程中资源共享 - 抢夺资源
        线程同步锁: synchronized锁 - 锁方法/代码块[借助对象]
                  锁普通方法: 就是锁this对象
                  锁静态方法: 锁 类.class(类的字节码) 对象
        Lock: lock() -> 加锁 unlock() -> 解锁
  线程通信: 共享资源
      wait() notify()
      notify() - 每次只能唤醒一个线程, 只能唤醒等待时间久的那个线程
      notifyAll() - 唤醒所有正在等待的线程
      wait() -> 只能被notify() 或者 notifyAll() 唤醒
      wait(long) -> 到时间以后, 自动醒来
线程池: Executors 工厂类中的方法
  newCachedThreadPool(): 创建一个根据需要创建新线程的线程池，但在可用时将重新使用以前构造的线程。
  newFixedThreadPool(int nThreads): 创建一个线程池，该线程池重用固定数量的从共享无界队列中运行的线程。
  newScheduledThreadPool(int corePoolSize): 创建一个线程池，可以调度命令在给定的延迟之后运行，或定期执行。
  newSingleThreadExecutor(): 创建一个使用从无界队列运行的单个工作线程的执行程序。

  线程池执行任务的API:
   1.submit(Runnable/Callable)
   2.execute(Runnable)

线程池的好处? 为什么使用线程池?

Callable(线程任务, 只能用在线程池) -> Runnable
new Thread(new Runnable(){});
new Thread(new Callable(){}); // --- 错误的!!

Callable对象只能在 :  Future<Date> f = pool.submit(Callable);
                     f.get() -> 得到call方法的返回值
                                可能会遇到阻塞
                     f.get(long, TimeUnit.xx) -> 超时继续

Lambda表达式: JDK1.8  函数式编程思想
   面向对象思想: 什么对象, 做什么, 结果是什么
   函数式编程思想: 强调做什么，而不是以什么形式做。

   语法: (参数列表) -> {一些代码}

   使用Lambda前提: 1.实现一个接口
                  2.接口中只有一个抽象方法
                  3.接口对象是作为方法参数使用的

   (参数列表) -> {一些代码}
       (参数列表): 表示要重写的抽象方法的参数列表
        -> : 固定语法, 指向/传递的意思
       {一些代码}: 要重写的方法体
   Lambda 取代匿名内部类的
     匿名内部类: 本质还是类, 编译后也会生成字节码文件, 运行时也要加载
     Lambda: 本质是一个函数, 编译后不会有字节码文件, 直接从内存中获取
             效率更高
   可推导即可省略:
     1.() 中的参数类型, 可以省略, 如果有多个参数, 每个参数类型都要一起省略
     2.{} 中如果只有一行代码, 不论这个方法有没有返回值, 那么[{} return ;] 可以省略
          {} return ; 必须一起省略
     3.() 中如果只有一个参数, () 可以省略, 和类型一起省略
       () 中如果没有参数, 必须写 ()

   函数式接口: 接口中只有一个抽象方法, 默认方法\静态方法\私有方法 随意
       @FunctionalInterface  -> 注解
   注解: JDK 1.5 属于程序的一部分, 可以取代一部分配置信息
       @Override  -> 检测方法是不是重写
       @SuppressWarnings -> 压制警告
       @Deprecated -> 标记一个类或者方法或者变量, 过时的
       @FunctionalInterface -> 检测一个接口是不是函数式接口

   可变长参数:
      取代了数组 int[] arr -> int... arr
      JDK1.5后, 修改为可变长参数
      1.方法中, 除了可变长参数, 还有别的参数, 可变长参数必须放在参数列表最后
      2.而且一个方法中, 只能有一个可变长参数

JUnit: 单元测试 -> 以方法为单位, 可以取代主方法
   System.out.println(); -> 打桩测试
   Debug -> 断点测试
   JUnit -> 单元测试

   别人写好的代码, 我们想要使用
   1.将别人写好的代码工程, 打包 jar 文件
         是将编译后的字节码文件打包的
   2.在自己的工程中 关联这个jar文件 -> 添加依赖
   3.代码中直接使用 import

   JUnit使用步骤:
     1.在工程中创建一个文件夹lib
     2.将2个jar包复制到lib中
     3.选择jar包 右键 -> Add as Library... 默认添加即可
     4.写一个测试类, 在其中写一个方法[不需要返回值,不需要参数]
     5.在方法上添加注解 @Test
     6.运行这个方法即可
  JUnit常用注解:
     @Test: 测试的方法, 可以直接运行
     @Before: 在测试方法之前调用的
     @After: 在测试方法之后调用的




